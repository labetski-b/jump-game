class BinanceWebSocketAPI {
    constructor() {
        this.baseWsUrl = 'wss://stream.binance.com:9443';
        this.ws = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 10;
        this.reconnectDelay = 1000;
        this.priceCache = new Map();
        this.lastUpdate = 0;
        
        // –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –∏–≥—Ä—ã –Ω–∞ –ø–∞—Ä—ã Binance
        this.symbolMap = {
            'BTC': 'BTCUSDT',
            'ETH': 'ETHUSDT', 
            'ADA': 'ADAUSDT',
            'DOT': 'DOTUSDT'
        };
        
        // –ö–æ–ª–±—ç–∫–∏
        this.onPriceUpdate = null;
        this.onError = null;
        this.onConnectionChange = null;
        
        console.log('üöÄ Binance WebSocket API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ó–∞–ø—É—Å–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async start() {
        try {
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance WebSocket...');
            
            await this.connect();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Binance WebSocket API:', error);
            this.onError?.(error);
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connect() {
        return new Promise((resolve, reject) => {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
            const streams = Object.values(this.symbolMap).map(pair => 
                `${pair.toLowerCase()}@ticker`
            ).join('/');
            
            const wsUrl = `${this.baseWsUrl}/stream?streams=${streams}`;
            
            console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', wsUrl);
            
            try {
                this.ws = new WebSocket(wsUrl);
                
                this.ws.onopen = () => {
                    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Binance');
                    this.isConnected = true;
                    this.reconnectAttempts = 0;
                    this.onConnectionChange?.(true);
                    resolve();
                };
                
                this.ws.onmessage = (event) => {
                    this.handleMessage(event.data);
                };
                
                this.ws.onerror = (error) => {
                    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                    this.onError?.(error);
                    if (!this.isConnected) {
                        reject(error);
                    }
                };
                
                this.ws.onclose = (event) => {
                    console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
                    this.isConnected = false;
                    this.onConnectionChange?.(false);
                    
                    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if (this.reconnectAttempts < this.maxReconnectAttempts) {
                        this.reconnectAttempts++;
                        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
                        
                        console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
                        
                        setTimeout(() => {
                            this.connect().catch(err => {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
                            });
                        }, delay);
                    } else {
                        console.error('üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                        this.onError?.(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket'));
                    }
                };
                
            } catch (error) {
                reject(error);
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    handleMessage(data) {
        try {
            const message = JSON.parse(data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ ticker –¥–∞–Ω–Ω—ã–µ
            if (message.stream && message.stream.includes('@ticker') && message.data) {
                const tickerData = message.data;
                const binancePair = tickerData.s; // –ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª –∏–≥—Ä—ã –ø–æ –ø–∞—Ä–µ Binance
                const gameSymbol = Object.keys(this.symbolMap).find(
                    symbol => this.symbolMap[symbol] === binancePair
                );
                
                if (gameSymbol) {
                    const price = parseFloat(tickerData.c); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                    const priceChange = parseFloat(tickerData.P); // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ %
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    this.priceCache.set(gameSymbol, {
                        symbol: gameSymbol,
                        price: price,
                        priceChange: priceChange,
                        lastUpdated: Date.now(),
                        volume: parseFloat(tickerData.v),
                        high24h: parseFloat(tickerData.h),
                        low24h: parseFloat(tickerData.l)
                    });
                    
                    this.lastUpdate = Date.now();
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    const prices = this.getGamePrices();
                    this.onPriceUpdate?.(prices);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
                    if (Date.now() - (this.lastLogTime || 0) > 5000) {
                        console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã: ${Object.keys(prices).join(', ')}`);
                        this.lastLogTime = Date.now();
                    }
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    getPrice(symbol) {
        const cached = this.priceCache.get(symbol);
        return cached ? cached.price : null;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    getPriceData(symbol) {
        return this.priceCache.get(symbol) || null;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω –¥–ª—è –∏–≥—Ä—ã
    getGamePrices() {
        const prices = {};
        
        for (const symbol of Object.keys(this.symbolMap)) {
            const cached = this.priceCache.get(symbol);
            if (cached) {
                prices[symbol] = {
                    price: cached.price,
                    change: cached.priceChange,
                    timestamp: cached.lastUpdated,
                    volume: cached.volume,
                    high24h: cached.high24h,
                    low24h: cached.low24h
                };
            }
        }
        
        return prices;
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket
    stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Binance WebSocket...');
        
        this.isConnected = false;
        this.reconnectAttempts = this.maxReconnectAttempts; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.close(1000, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é');
        }
        
        console.log('‚úÖ Binance WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    getStatus() {
        return {
            connected: this.isConnected,
            lastUpdate: this.lastUpdate,
            cachedPrices: this.priceCache.size,
            timeSinceUpdate: Date.now() - this.lastUpdate,
            reconnectAttempts: this.reconnectAttempts
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    isDataFresh(maxAgeMs = 10000) { // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ 10 —Å–µ–∫—É–Ω–¥
        return (Date.now() - this.lastUpdate) < maxAgeMs;
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
    setPriceUpdateCallback(callback) {
        this.onPriceUpdate = callback;
    }
    
    setErrorCallback(callback) {
        this.onError = callback;
    }
    
    setConnectionChangeCallback(callback) {
        this.onConnectionChange = callback;
    }
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async testConnection() {
        try {
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket...');
            
            return new Promise((resolve, reject) => {
                const testWs = new WebSocket(`${this.baseWsUrl}/ws/btcusdt@ticker`);
                
                const timeout = setTimeout(() => {
                    testWs.close();
                    reject(new Error('–¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
                }, 5000);
                
                testWs.onopen = () => {
                    console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω');
                    clearTimeout(timeout);
                    testWs.close();
                    resolve(true);
                };
                
                testWs.onerror = (error) => {
                    console.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω:', error);
                    clearTimeout(timeout);
                    reject(error);
                };
                
                testWs.onmessage = (event) => {
                    // –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ - –∑–Ω–∞—á–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Binance');
                    clearTimeout(timeout);
                    testWs.close();
                    resolve(true);
                };
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            return false;
        }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async reconnect() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        
        this.stop();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        this.reconnectAttempts = 0;
        await this.start();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.BinanceWebSocketAPI = BinanceWebSocketAPI;