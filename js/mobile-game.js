class MobileGame extends Game {
    constructor() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å body –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        document.body.classList.add('mobile');
        
        super();
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI
        this.mobileWallet = document.getElementById('mobileWallet');
        this.mobilePnL = document.getElementById('mobilePnL');
        this.mobileLeverage = document.getElementById('mobileLeverage');
        this.mobileConnectionStatus = document.getElementById('mobileConnectionStatus');
        this.positionModal = document.getElementById('positionModal');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupMobileControls();
        this.setupMobileUI();
        this.setupSwipeGestures();
        
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º canvas –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        this.adaptCanvasForMobile();
        
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    setupCanvas() {
        // –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ canvas –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const gameArea = document.querySelector('.game-area');
        const rect = gameArea.getBoundingClientRect();
        
        this.canvas.width = rect.width;
        this.canvas.height = rect.height;
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —á–µ—Ç–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π
        this.ctx.imageSmoothingEnabled = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        if (this.columnManager) {
            this.columnManager.updateColumnPositions();
        }
    }
    
    adaptCanvasForMobile() {
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–Ω –∏–ª–∏ –∏—Ö —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
        if (this.columnManager) {
            this.columnManager.columnSpacing = 80; // –ú–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–Ω–∞–º–∏
            this.columnManager.updateColumnPositions();
        }
    }
    
    setupMobileControls() {
        // Touch-—Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        document.querySelectorAll('.crypto-btn').forEach((btn, index) => {
            btn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                this.handleCryptoButtonTap(btn, index);
            });
            
            // –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleCryptoButtonTap(btn, index);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∞ –ø–ª–µ—á–∞
        this.mobileLeverage.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleLeverageButtonTap();
        });
        
        this.mobileLeverage.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleLeverageButtonTap();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = document.querySelector('.close-btn');
        if (closeBtn) {
            closeBtn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                this.hidePositionModal();
            });
            closeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.hidePositionModal();
            });
        }
    }
    
    handleCryptoButtonTap(button, index) {
        if (this.gameState !== 'waiting') return;
        
        const cryptoType = button.dataset.crypto;
        
        if (cryptoType === 'usdt') {
            // USDT –∫–Ω–æ–ø–∫–∞
            this.executeJump('stable', 0);
        } else {
            // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            const cryptoIndex = parseInt(cryptoType);
            this.executeJump('volatile', cryptoIndex);
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);
    }
    
    handleLeverageButtonTap() {
        if (this.columnManager) {
            const newLeverage = this.columnManager.cycleLeverage();
            this.updateMobileLeverageDisplay(newLeverage);
        }
    }
    
    setupSwipeGestures() {
        let startY = 0;
        let startX = 0;
        
        this.canvas.addEventListener('touchstart', (e) => {
            const touch = e.touches[0];
            startY = touch.clientY;
            startX = touch.clientX;
        });
        
        this.canvas.addEventListener('touchend', (e) => {
            const touch = e.changedTouches[0];
            const endY = touch.clientY;
            const endX = touch.clientX;
            
            const diffY = startY - endY;
            const diffX = Math.abs(startX - endX);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
            if (Math.abs(diffY) > 50 && diffX < 100) {
                if (diffY > 0 && this.columnManager.playerOnVolatile) {
                    // –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
                    this.showPositionModal();
                } else if (diffY < 0) {
                    // –°–≤–∞–π–ø –≤–Ω–∏–∑ - —Å–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
                    this.hidePositionModal();
                }
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ —Å–≤–∞–π–ø—É –≤–Ω–∏–∑
        this.positionModal.addEventListener('touchstart', (e) => {
            startY = e.touches[0].clientY;
        });
        
        this.positionModal.addEventListener('touchend', (e) => {
            const endY = e.changedTouches[0].clientY;
            const diff = endY - startY;
            
            if (diff > 100) {
                this.hidePositionModal();
            }
        });
    }
    
    update(deltaTime) {
        // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π update
        super.update(deltaTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π UI
        this.updateMobileUI();
    }
    
    updateMobileUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        const walletValue = this.columnManager.getWalletValue();
        this.mobileWallet.textContent = `$${walletValue.toFixed(1)}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º P/L –¥–∏—Å–ø–ª–µ–π
        if (this.columnManager.playerOnVolatile && this.columnManager.marginPosition) {
            const currentWallet = this.columnManager.getPotentialWalletDisplay();
            const initialWallet = this.columnManager.marginPosition.initialWallet;
            const profitLoss = currentWallet - initialWallet;
            
            const sign = profitLoss >= 0 ? '+' : '';
            this.mobilePnL.textContent = `${sign}$${profitLoss.toFixed(2)}`;
            this.mobilePnL.className = 'pnl-display ' + (profitLoss >= 0 ? 'positive' : 'negative');
        } else {
            this.mobilePnL.textContent = '$0.00';
            this.mobilePnL.className = 'pnl-display';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        this.updateCryptoButtons();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.updateMobileConnectionStatus();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∏ –≤ –∫–Ω–æ–ø–∫–∞—Ö
        this.updateButtonCharts();
    }
    
    updateCryptoButtons() {
        document.querySelectorAll('.crypto-btn').forEach((btn, index) => {
            const cryptoType = btn.dataset.crypto;
            
            if (cryptoType === 'usdt') {
                // USDT –∫–Ω–æ–ø–∫–∞
                btn.classList.toggle('active', !this.columnManager.playerOnVolatile);
                const usdtInfo = btn.querySelector('.crypto-info');
                if (usdtInfo) {
                    const potentialValue = this.columnManager.getPotentialWalletDisplay();
                    usdtInfo.textContent = `$${potentialValue.toFixed(1)}`;
                }
            } else {
                // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                const cryptoIndex = parseInt(cryptoType);
                const isActive = this.columnManager.playerOnVolatile && 
                               this.columnManager.currentVolatileIndex === cryptoIndex;
                
                btn.classList.toggle('active', isActive);
                
                const info = btn.querySelector('.crypto-info');
                if (info) {
                    if (!this.columnManager.playerOnVolatile) {
                        info.textContent = '–ö—É–ø–∏—Ç—å';
                    } else if (isActive) {
                        info.textContent = '–ü—Ä–æ–¥–∞—Ç—å';
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π P/L –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        const potentialValue = this.columnManager.calculateUSDTEquivalentForCrypto(cryptoIndex);
                        const initialWallet = this.columnManager.marginPosition ? 
                            this.columnManager.marginPosition.initialWallet : this.columnManager.walletValue;
                        const profitLoss = potentialValue - initialWallet;
                        const percentChange = initialWallet > 0 ? (profitLoss / initialWallet) * 100 : 0;
                        
                        const sign = percentChange >= 0 ? '+' : '';
                        info.textContent = `${sign}${percentChange.toFixed(1)}%`;
                    }
                }
            }
        });
    }
    
    updateMobileLeverageDisplay(leverage) {
        this.mobileLeverage.textContent = `x${leverage}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–µ—á–∞
        this.mobileLeverage.className = 'leverage-btn';
        if (leverage >= 1000) {
            this.mobileLeverage.style.background = '#E74C3C';
            this.mobileLeverage.style.borderColor = '#C0392B';
        } else if (leverage >= 500) {
            this.mobileLeverage.style.background = '#9B59B6';
            this.mobileLeverage.style.borderColor = '#8E44AD';
        } else if (leverage >= 100) {
            this.mobileLeverage.style.background = '#FF4444';
            this.mobileLeverage.style.borderColor = '#FF6B6B';
        } else if (leverage >= 10) {
            this.mobileLeverage.style.background = '#F39C12';
            this.mobileLeverage.style.borderColor = '#E67E22';
        } else {
            this.mobileLeverage.style.background = '#95A5A6';
            this.mobileLeverage.style.borderColor = '#7F8C8D';
        }
    }
    
    updateMobileConnectionStatus() {
        const status = this.columnManager.getStatus();
        this.mobileConnectionStatus.textContent = status.connected ? 
            'üü¢ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        this.mobileConnectionStatus.className = 'status-indicator ' + 
            (status.connected ? 'connected' : '');
    }
    
    updateButtonCharts() {
        document.querySelectorAll('.crypto-btn .mini-chart').forEach((canvas, index) => {
            const cryptoName = this.columnManager.cryptoNames[index];
            this.drawButtonMiniChart(canvas, cryptoName);
        });
    }
    
    drawButtonMiniChart(canvas, cryptoSymbol) {
        const ctx = canvas.getContext('2d');
        const history = this.columnManager.priceHistory[cryptoSymbol];
        
        if (!history || history.length < 2) {
            return; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        }
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        const prices = history.map(point => point.price);
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        const priceRange = maxPrice - minPrice;
        
        if (priceRange === 0) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
        const firstPrice = prices[0];
        const lastPrice = prices[prices.length - 1];
        const lineColor = lastPrice >= firstPrice ? '#00FF41' : '#FF4444';
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
        ctx.strokeStyle = lineColor;
        ctx.lineWidth = 1;
        ctx.globalAlpha = 0.8;
        
        ctx.beginPath();
        
        for (let i = 0; i < history.length; i++) {
            const price = history[i].price;
            const normalizedPrice = (price - minPrice) / priceRange;
            
            const x = (i / (history.length - 1)) * canvas.width;
            const y = canvas.height - (normalizedPrice * canvas.height);
            
            if (i === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        }
        
        ctx.stroke();
        ctx.globalAlpha = 1;
    }
    
    showPositionModal() {
        if (!this.columnManager.playerOnVolatile) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.updatePositionModalContent();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.positionModal.classList.add('visible');
    }
    
    hidePositionModal() {
        this.positionModal.classList.remove('visible');
    }
    
    updatePositionModalContent() {
        const detailsDiv = document.getElementById('positionDetails');
        const comparisonInfo = this.columnManager.getComparisonSystemInfo();
        
        if (!comparisonInfo) {
            detailsDiv.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏</p>';
            return;
        }
        
        const marginInfo = this.columnManager.marginPosition;
        const leverage = comparisonInfo.leverage || 1;
        const ownMoney = marginInfo ? marginInfo.initialWallet : comparisonInfo.totalBudget;
        const borrowedMoney = marginInfo ? marginInfo.positionSize - ownMoney : 0;
        
        detailsDiv.innerHTML = `
            <div style="margin-bottom: 15px;">
                <strong>–ü–ª–µ—á–æ:</strong> x${leverage}<br>
                <strong>${comparisonInfo.activeSymbol}:</strong> ${comparisonInfo.activeAmount.toFixed(6)}<br>
                <strong>–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</strong> $${comparisonInfo.buyPrice.toFixed(2)}
            </div>
            
            <div style="margin-bottom: 15px; padding-top: 15px; border-top: 1px solid #444;">
                <h4 style="margin: 0 0 10px 0; color: #888; font-size: 14px;">–§–ò–ù–ê–ù–°–ò–†–û–í–ê–ù–ò–ï:</h4>
                <strong>–°–≤–æ–∏ –¥–µ–Ω—å–≥–∏:</strong> $${ownMoney.toFixed(2)}<br>
                ${leverage > 1 ? `<strong>–ó–∞–µ–º–Ω—ã–µ:</strong> $${borrowedMoney.toFixed(2)}<br>` : ''}
                <strong>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</strong> $${comparisonInfo.totalBudget.toFixed(2)}
            </div>
            
            <div style="padding-top: 15px; border-top: 1px solid #444;">
                <strong>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> $${comparisonInfo.currentValue.toFixed(2)}<br>
                <strong style="color: ${comparisonInfo.profitLoss >= 0 ? '#00FF41' : '#FF4444'}">
                    P/L: ${comparisonInfo.profitLoss >= 0 ? '+' : ''}$${comparisonInfo.profitLoss.toFixed(2)} 
                    (${comparisonInfo.percentChange >= 0 ? '+' : ''}${comparisonInfo.percentChange.toFixed(2)}%)
                </strong>
            </div>
        `;
    }
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    handleClick(event) {
        // –í –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–ª–∏–∫–∏ –ø–æ canvas –æ—Ç–∫–ª—é—á–µ–Ω—ã
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞
    init() {
        super.init();
        this.updateMobileLeverageDisplay(this.columnManager.getLeverage());
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobileDevice() {
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           window.innerWidth < 768;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
if (isMobileDevice() && !window.location.pathname.includes('mobile.html')) {
    window.location.href = 'mobile.html';
}