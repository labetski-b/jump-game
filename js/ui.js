class UIManager {
    constructor() {
        this.stableHeightElement = document.getElementById('stableHeight');
        this.percentChangeElement = document.getElementById('percentChange');
        this.instructionsElement = document.getElementById('instructions');
        
        // –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.connectionStatus = document.getElementById('connectionStatus');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ—á–æ–º
        this.leverageButton = document.getElementById('leverageButton');
        this.setupLeverageControl();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.lastStableHeight = 100.0;
        this.animationQueue = [];
    }
    
    updateStableColumnInfo(height, percentChange) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.animateValue(this.stableHeightElement, this.lastStableHeight, height, 1000, (value) => {
            return value.toFixed(1);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        this.updatePercentChange(percentChange);
        
        this.lastStableHeight = height;
    }
    
    updatePercentChange(percentChange) {
        const element = this.percentChangeElement;
        const formattedPercent = (percentChange >= 0 ? '+' : '') + percentChange.toFixed(2) + '%';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        element.style.transform = 'scale(0.8)';
        element.style.opacity = '0.5';
        
        setTimeout(() => {
            element.textContent = formattedPercent;
            
            // –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
            element.classList.remove('positive', 'negative');
            if (percentChange > 0) {
                element.classList.add('positive');
                this.createSuccessEffect();
            } else if (percentChange < 0) {
                element.classList.add('negative');
                this.createLossEffect();
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            element.style.transform = 'scale(1)';
            element.style.opacity = '1';
            
            // –î–æ–±–∞–≤–ª—è–µ–º pulse —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if (Math.abs(percentChange) > 5) {
                element.classList.add('pulse');
                setTimeout(() => {
                    element.classList.remove('pulse');
                }, 500);
            }
        }, 100);
    }
    
    showGrowthFeedback(oldHeight, newHeight, percentChange) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π P/L –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ (100 USDT)
        const initialDeposit = 100; // –ò—Å—Ö–æ–¥–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
        const profitLoss = newHeight - initialDeposit;
        const profitLossText = (profitLoss >= 0 ? '+' : '') + profitLoss.toFixed(1);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ—Å—Ç–µ
        const feedbackElement = document.createElement('div');
        feedbackElement.style.position = 'absolute';
        feedbackElement.style.top = '120px';
        feedbackElement.style.left = '50%';
        feedbackElement.style.transform = 'translateX(-50%)';
        feedbackElement.style.background = percentChange >= 0 ? 'rgba(126, 211, 33, 0.9)' : 'rgba(217, 83, 79, 0.9)';
        feedbackElement.style.color = 'white';
        feedbackElement.style.padding = '12px 20px';
        feedbackElement.style.borderRadius = '8px';
        feedbackElement.style.fontSize = '16px';
        feedbackElement.style.fontWeight = 'bold';
        feedbackElement.style.textAlign = 'center';
        feedbackElement.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)';
        feedbackElement.style.zIndex = '1000';
        feedbackElement.style.animation = 'growthFeedback 3s ease-out forwards';
        feedbackElement.style.pointerEvents = 'none';
        
        feedbackElement.innerHTML = `
            <div style="font-size: 18px; margin-bottom: 4px;">
                ${newHeight.toFixed(1)} USDT
            </div>
            <div style="font-size: 14px; opacity: 0.9;">
                ${profitLossText} (${(percentChange >= 0 ? '+' : '') + percentChange.toFixed(2)}%)
            </div>
        `;
        
        document.getElementById('ui').appendChild(feedbackElement);
        
        // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (feedbackElement.parentNode) {
                feedbackElement.parentNode.removeChild(feedbackElement);
            }
        }, 3000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        this.ensureGrowthFeedbackAnimation();
    }
    
    updateInstructions(text) {
        this.instructionsElement.textContent = text;
    }
    
    showJumpingState() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä—ã–∂–∫–∞
        this.instructionsElement.style.display = 'none';
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä—ã–∂–∫–∞
        this.percentChangeElement.style.opacity = '0.5';
    }
    
    showWaitingState(currentColumn) {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.instructionsElement.style.display = 'none';
        this.percentChangeElement.style.opacity = '1';
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance
    updateConnectionStatus(connected, details = '') {
        if (!this.connectionStatus) return;
        
        if (connected) {
            this.connectionStatus.textContent = 'üü¢ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω';
            this.connectionStatus.className = 'price-status active';
        } else {
            this.connectionStatus.textContent = 'üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
            this.connectionStatus.className = 'price-status error';
        }
        
        if (details) {
            this.connectionStatus.title = details;
        }
    }
    
    animateValue(element, startValue, endValue, duration, formatter) {
        const startTime = Date.now();
        
        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            const easedProgress = this.easeOutCubic(progress);
            const currentValue = startValue + (endValue - startValue) * easedProgress;
            
            element.textContent = formatter(currentValue);
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };
        
        animate();
    }
    
    easeOutCubic(t) {
        return 1 - Math.pow(1 - t, 3);
    }
    
    createSuccessEffect() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —É—Å–ø–µ—Ö–∞
        const effect = document.createElement('div');
        effect.style.position = 'absolute';
        effect.style.top = '20px';
        effect.style.right = '20px';
        effect.style.color = '#7ED321';
        effect.style.fontSize = '24px';
        effect.style.fontWeight = 'bold';
        effect.style.textShadow = '0 0 10px rgba(126, 211, 33, 0.8)';
        effect.style.animation = 'fadeInOut 2s ease-out forwards';
        effect.textContent = '‚Üó –ü–†–ò–ë–´–õ–¨!';
        effect.style.pointerEvents = 'none';
        
        document.getElementById('ui').appendChild(effect);
        
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 2000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        this.ensureFadeInOutAnimation();
    }
    
    createLossEffect() {
        // –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ –¥–ª—è —É–±—ã—Ç–∫–æ–≤
        const gameContainer = document.getElementById('gameContainer');
        gameContainer.classList.add('shake');
        
        setTimeout(() => {
            gameContainer.classList.remove('shake');
        }, 500);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É–±—ã—Ç–∫–∞
        const effect = document.createElement('div');
        effect.style.position = 'absolute';
        effect.style.top = '20px';
        effect.style.right = '20px';
        effect.style.color = '#D9534F';
        effect.style.fontSize = '24px';
        effect.style.fontWeight = 'bold';
        effect.style.textShadow = '0 0 10px rgba(217, 83, 79, 0.8)';
        effect.style.animation = 'fadeInOut 2s ease-out forwards';
        effect.textContent = '‚Üò –£–ë–´–¢–û–ö!';
        effect.style.pointerEvents = 'none';
        
        document.getElementById('ui').appendChild(effect);
        
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 2000);
    }
    
    ensureFadeInOutAnimation() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        const existingStyle = document.getElementById('fadeInOutAnimation');
        if (existingStyle) return;
        
        const style = document.createElement('style');
        style.id = 'fadeInOutAnimation';
        style.textContent = `
            @keyframes fadeInOut {
                0% {
                    opacity: 0;
                    transform: translateY(-20px) scale(0.8);
                }
                20% {
                    opacity: 1;
                    transform: translateY(0) scale(1.1);
                }
                80% {
                    opacity: 1;
                    transform: translateY(0) scale(1);
                }
                100% {
                    opacity: 0;
                    transform: translateY(-10px) scale(0.9);
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    showMilestone(milestone) {
        const effect = document.createElement('div');
        effect.style.position = 'absolute';
        effect.style.top = '50%';
        effect.style.left = '50%';
        effect.style.transform = 'translate(-50%, -50%)';
        effect.style.color = '#F39C12';
        effect.style.fontSize = '32px';
        effect.style.fontWeight = 'bold';
        effect.style.textShadow = '0 0 20px rgba(243, 156, 18, 0.8)';
        effect.style.animation = 'milestoneAnimation 3s ease-out forwards';
        effect.textContent = `üéâ ${milestone}!`;
        effect.style.pointerEvents = 'none';
        effect.style.zIndex = '1000';
        
        document.getElementById('ui').appendChild(effect);
        
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 3000);
        
        this.ensureMilestoneAnimation();
    }
    
    ensureMilestoneAnimation() {
        const existingStyle = document.getElementById('milestoneAnimation');
        if (existingStyle) return;
        
        const style = document.createElement('style');
        style.id = 'milestoneAnimation';
        style.textContent = `
            @keyframes milestoneAnimation {
                0% {
                    opacity: 0;
                    transform: translate(-50%, -50%) scale(0.3);
                }
                10% {
                    opacity: 1;
                    transform: translate(-50%, -50%) scale(1.2);
                }
                90% {
                    opacity: 1;
                    transform: translate(-50%, -50%) scale(1);
                }
                100% {
                    opacity: 0;
                    transform: translate(-50%, -50%) scale(0.8);
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    ensureGrowthFeedbackAnimation() {
        const existingStyle = document.getElementById('growthFeedbackAnimation');
        if (existingStyle) return;
        
        const style = document.createElement('style');
        style.id = 'growthFeedbackAnimation';
        style.textContent = `
            @keyframes growthFeedback {
                0% {
                    opacity: 0;
                    transform: translateX(-50%) translateY(-20px) scale(0.8);
                }
                15% {
                    opacity: 1;
                    transform: translateX(-50%) translateY(0px) scale(1.1);
                }
                85% {
                    opacity: 1;
                    transform: translateX(-50%) translateY(0px) scale(1);
                }
                100% {
                    opacity: 0;
                    transform: translateX(-50%) translateY(-10px) scale(0.9);
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    updateComparisonDisplay(comparisonInfo) {
        if (!comparisonInfo) return;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let comparisonElement = document.getElementById('comparisonInfo');
        if (!comparisonElement) {
            comparisonElement = document.createElement('div');
            comparisonElement.id = 'comparisonInfo';
            comparisonElement.style.position = 'absolute';
            comparisonElement.style.top = '120px'; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏–ø–∞–Ω–∏—è
            comparisonElement.style.left = '20px';
            comparisonElement.style.background = 'rgba(0, 0, 0, 0.8)';
            comparisonElement.style.color = '#FFFFFF';
            comparisonElement.style.padding = '12px';
            comparisonElement.style.fontSize = '12px';
            comparisonElement.style.fontFamily = 'JetBrains Mono, monospace';
            comparisonElement.style.zIndex = '1000';
            comparisonElement.style.border = '1px solid #333333';
            comparisonElement.style.lineHeight = '1.4';
            document.getElementById('ui').appendChild(comparisonElement);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –æ—Ç game
        const currentPrice = this.getCurrentPrice ? this.getCurrentPrice(comparisonInfo.activeSymbol) : null;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
        const changeColor = comparisonInfo.profitLoss >= 0 ? '#7ED321' : '#D9534F';
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const marginInfo = window.game?.columnManager?.marginPosition;
        const leverage = comparisonInfo.leverage || 1;
        const ownMoney = marginInfo ? marginInfo.initialWallet : comparisonInfo.totalBudget;
        const borrowedMoney = marginInfo ? marginInfo.positionSize - ownMoney : 0;
        
        comparisonElement.innerHTML = `
            <div style="color: #666666; margin-bottom: 6px; font-size: 9px; text-transform: uppercase;">ACTIVE POSITION</div>
            <div style="color: #FFA500; font-weight: bold;">–ü–ª–µ—á–æ: x${leverage}</div>
            <div>${comparisonInfo.activeSymbol}: ${comparisonInfo.activeAmount.toFixed(6)}</div>
            <div>Buy: $${comparisonInfo.buyPrice.toFixed(2)}</div>
            ${currentPrice ? `<div>Now: $${currentPrice.toFixed(2)}</div>` : ''}
            <div style="margin-top: 6px; border-top: 1px solid #444; padding-top: 4px;">
                <div style="color: #888; font-size: 11px;">–§–ò–ù–ê–ù–°–ò–†–û–í–ê–ù–ò–ï:</div>
                <div>–°–≤–æ–∏: $${ownMoney.toFixed(2)}</div>
                ${leverage > 1 ? `<div>–ó–∞–π–º: $${borrowedMoney.toFixed(2)}</div>` : ''}
                <div>–ü–æ–∑–∏—Ü–∏—è: $${comparisonInfo.totalBudget.toFixed(2)}</div>
            </div>
            <div style="margin-top: 4px;">
                <div>–°—Ç–æ–∏–º–æ—Å—Ç—å: $${comparisonInfo.currentValue.toFixed(2)}</div>
                <div style="color: ${changeColor};">
                    P/L: ${comparisonInfo.profitLoss >= 0 ? '+' : ''}$${comparisonInfo.profitLoss.toFixed(2)} 
                    (${comparisonInfo.percentChange >= 0 ? '+' : ''}${comparisonInfo.percentChange.toFixed(1)}%)
                </div>
            </div>
        `;
    }
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ—á–æ–º
    setupLeverageControl() {
        if (!this.leverageButton) return;
        
        this.leverageButton.addEventListener('click', () => {
            if (window.game && window.game.columnManager) {
                const newLeverage = window.game.columnManager.cycleLeverage();
                this.updateLeverageDisplay(newLeverage);
            }
        });
    }
    
    updateLeverageDisplay(leverage) {
        if (!this.leverageButton) return;
        
        this.leverageButton.textContent = `x${leverage}`;
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –ø–ª–µ—á–∞
        this.leverageButton.classList.remove('x10', 'x100', 'x500', 'x1000');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
        if (leverage === 10) {
            this.leverageButton.classList.add('x10');
        } else if (leverage === 100) {
            this.leverageButton.classList.add('x100');
        } else if (leverage === 500) {
            this.leverageButton.classList.add('x500');
        } else if (leverage === 1000) {
            this.leverageButton.classList.add('x1000');
        }
    }
}